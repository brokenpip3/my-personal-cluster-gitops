---
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
  labels:
    infra.gitops: prometheus
    prometheus: scrape
---
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: prometheus-stack
  namespace: monitoring
spec:
  install:
    crds: Create
  upgrade:
    crds: CreateReplace
  driftDetection:
    mode: enabled
    ignore:
      - paths: [ "/metadata/annotations/prometheus-operator-validated" ]
        target:
          kind: PrometheusRule
  interval: 10m
  releaseName: prom
  chart:
    spec:
      chart: kube-prometheus-stack
      version: "62.x.x"
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
      interval: 10m
  values:
    commonLabels:
      infra.gitops: prometheus
    defaultRules:
      rules:
        alertmanager: false
        kubeApiserverAvailability: false
        kubeApiserverError: false
        kubeApiserverSlos: false
        network: true
        kubeSchedulerAlerting: false
        kubeSchedulerRecording: false
        etcd: false
    grafana:
      enabled: false
    kubeProxy:
      enabled: false
    kubeControllerManager:
      enabled: false
    kubeScheduler:
      enabled: false
    kubeEtcd:
      enabled: false
    prometheus-node-exporter:
      extraHostVolumeMounts:
        - name: text-file
          hostPath: /var/lib/node_exporter
          mountPath: /var/lib/node_exporter
          readOnly: true
          mountPropagation: HostToContainer
      extraArgs:
        - --collector.textfile.directory=/var/lib/node_exporter
        - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
        - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      service:
        ipDualStack:
          enabled: false
          ipFamilies: ["IPv4"]
          ipFamilyPolicy: "SingleStack"
    prometheus:
      prometheusSpec:
        enableRemoteWriteReceiver: true
        serviceMonitorSelectorNilUsesHelmValues: false
        serviceMonitorNamespaceSelector:
          matchLabels:
            prometheus: scrape
        ruleSelectorNilUsesHelmValues: false
        ruleSelectorNamespaceSelector:
          matchLabels:
            prometheus: scrape
        podMonitorSelectorNilUsesHelmValues: false
        podMonitorNamespaceSelector:
          matchLabels:
            prometheus: scrape
        probeSelectorNilUsesHelmValues: false
        probeSelectorNamespaceSelector:
          matchLabels:
            prometheus: scrape
        retention: 7d
        #additionalScrapeConfigs:
        # - job_name: 'bastion-host'
        #   scrape_interval: 1m
        #   scheme: http
        #   static_configs:
        #     - targets: ['zelinda:9100']
        storageSpec:
          volumeClaimTemplate:
            spec:
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 10Gi
    alertmanager:
      config:
        route:
          receiver: 'alertmanager-bot'
        receivers:
        - name: 'null'
        - name: 'alertmanager-bot'
          webhook_configs:
          - send_resolved: true
            url: 'http://alertmanager-bot:8080'
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 1Gi
