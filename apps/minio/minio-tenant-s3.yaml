apiVersion: minio.min.io/v2
kind: Tenant
metadata:
  name: minio-s3
  namespace: minio
  labels:
    app: minio
    tenant-scope: s3
  annotations:
    prometheus.io/path: /minio/v2/metrics/cluster
    prometheus.io/port: "9000"
    prometheus.io/scrape: "true"
spec:
  image: docker.io/minio/minio:RELEASE.2022-07-06T20-29-49Z #{"$imagepolicy": "flux-system:image-policy-minio"}
  imagePullPolicy: IfNotPresent
  credsSecret:
    name: minio-tenant-s3
  pools:
    - servers: 1
      name: "pool"
      volumesPerServer: 4
      volumeClaimTemplate:
        metadata:
          name: data
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 10Gi
      # nodeSelector:
      #   disktype: ssd
      resources:
        requests:
          cpu: 200m
          memory: 500Mi
        limits:
          cpu: 500m
          memory: 1Gi
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        fsGroup: 1000
  mountPath: /export
  externalCertSecret:
    - name: minio-tenant-s3-cert
      type: kubernetes.io/tls
  requestAutoCert: false
  prometheusOperator:
    labels:
      prometheus: scrape
  s3:
    bucketDNS: false
  certConfig:
    commonName: ""
    organizationName: []
    dnsNames: []
  podManagementPolicy: Parallel
  # users:
  #   - name: minio-user1
  #   - name: minio-user2
  serviceMetadata:
    minioServiceLabels:
      label: minio-svc
    minioServiceAnnotations:
      v2.min.io: minio-svc
    consoleServiceLabels:
      label: console-svc
    consoleServiceAnnotations:
      v2.min.io: console-svc
  ## Add environment variables to be set in MinIO container (https://github.com/minio/minio/tree/master/docs/config)
  # env:
  # - name: MINIO_BROWSER
  #   value: "off" # to turn-off browser
  # - name: MINIO_STORAGE_CLASS_STANDARD
  #   value: "EC:2"
  #   ## For secure env vars like passwords, create an opaque Kubernetes secret and specify the secret in
  #   ## the `valueFrom` field. The `valueFrom` object must contain the following fields:
  #   ## `name` - the secret from which MinIO extracts the password, `key` - the data field
  #   ## within secret, whose value will be set to the env variable's value
  # - name: MINIO_IDENTITY_LDAP_LOOKUP_BIND_PASSWORD
  #   valueFrom:
  #     secretKeyRef:
  #       name: ldap-minio-secret
  #       key: MINIO_IDENTITY_LDAP_LOOKUP_BIND_PASSWORD
