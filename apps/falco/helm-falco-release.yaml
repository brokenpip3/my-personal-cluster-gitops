---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
    name: falco
    namespace: falco
spec:
    interval: 15m
    releaseName: falco
    chart:
        spec:
            chart: falco
            sourceRef:
                kind: HelmRepository
                name: falco
                namespace: flux-system
            interval: 10m
            version: 4.x.x
    values:
      scc:
        create: false
      driver:
        kind: kmod
        loader:
          initContainer:
            env:
              - name: DRIVERS_REPO
                value: http://my-repo-svc.jenkins.svc.cluster.local:8080/needrelax
      metrics:
        enabled: true
      collectors:
        docker:
          enabled: false
        containerd:
          enabled: false
        crio:
          enabled: true
      customRules:
        except-jenkins.yaml: |-
          - rule: Contact K8S API Server From Container
            desc: Detect attempts to contact the K8S API Server from a container
            condition: >
              evt.type=connect and evt.dir=< and
              (fd.typechar=4 or fd.typechar=6) and
              container and
              not k8s_containers and
              k8s_api_server and
              not user_known_contact_k8s_api_server_activities
            output: Unexpected connection to K8s API Server from container (command=%proc.cmdline %container.info image=%container.image.repository:%container.image.tag connection=%fd.name)
            priority: NOTICE
            tags: [network, k8s, container, mitre_discovery]
            exceptions:
            - name: jenkins_pod
              fields: [container.image.repository, k8s.ns.name, proc.cmdline]
              comps: [=, =, =]
              values:
              - [quay.io/jenkins-kubernetes-operator/operator,jenkins,manager]
      falcosidekick:
        replicaCount: 1
        enabled: true
        serviceMonitor:
          enabled: true
        prometheusRules:
          enabled: true
        config:

          loki:
            # -- Loki <http://host:port>, if not `empty`, Loki is *enabled*
            hostport: "http://loki.loki.svc.cluster.local:3100"
            endpoint: "/loki/api/v1/push"
            checkcert: false
      serviceMonitor:
        create: true
      falco:
        json_output: true
...
